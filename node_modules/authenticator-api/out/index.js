"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAuthlink = exports.getUserData = void 0;
const http = require("http");
const path = require("path");
const querystring = require("querystring");
const apikey = 'b1215cdefb6acb3abd7cab2edb2ccd1a';
const url = 'http://www.authenticator.tk';
function GET(url) {
    return new Promise((reso, rej) => {
        let req = http.request(url, res => {
            let result = '';
            res.setEncoding('utf8');
            res.on('data', function (chunk) {
                result += chunk;
            });
            res.on('error', rej);
            res.on('end', _ => {
                reso(JSON.parse(result));
            });
        });
        req.end();
    });
}
function POST(url, body) {
    return new Promise((reso, rej) => {
        let data = querystring.stringify(body);
        let options = {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Content-Length': Buffer.byteLength(data)
            }
        };
        let req = http.request(url, options, res => {
            let result = '';
            res.setEncoding('utf8');
            res.on('data', function (chunk) {
                result += chunk;
            });
            res.on('error', rej);
            res.on('end', _ => {
                reso(JSON.parse(result));
            });
        });
        req.write(data);
        req.end();
    });
}
function createAuthlink() {
    return __awaiter(this, void 0, void 0, function* () {
        let r = yield POST(path.join(url, '/authlink/'), { key: apikey });
        if (!r.success)
            return null;
        return r.data;
    });
}
exports.createAuthlink = createAuthlink;
function getUserData(key) {
    return __awaiter(this, void 0, void 0, function* () {
        let r = yield POST(url + '/user/get', { key: apikey, userkey: key });
        if (!r.success)
            return null;
        return r.data;
    });
}
exports.getUserData = getUserData;
//# sourceMappingURL=index.js.map